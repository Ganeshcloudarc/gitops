<launch>
    <arg name="hardware_in_loop" default="true" doc="false to software in loop"/>
    <arg name="vehicle_type" default="half_cabin" doc="It can be either half_cabin or porter"/>

    <arg name="mission_file" default="default.json"/>
    <arg name="mission_continue" default="true"/>
    <arg name="mission_trips" default="0" doc="when mission_continue is true, this many number of times a mission repeat works, 0-infinity loops "/>
    <arg name ='rviz' default = 'true'/>
    <arg name="record" default="true"/>
    <arg name="failsafe_enable" default="true"/>
    <arg name="obs_stop_planner" default="true"/>

    <param name = "/patrol/mission_file" value = "$(arg mission_file)"/>
    <param name="/patrol/mission_continue" value ="$(arg mission_continue)"/>
    <param name="/patrol/mission_trips" value ="$(arg mission_trips)"/>
    <param name="/patrol/failsafe_enable" value = "$(arg failsafe_enable)"/>
    <rosparam command="load" file="$(find autopilot)/params/patrol_params.yaml"/>
    <param name='/patrol/gps_topic' value = '/mavros/global_position/global'/>
    <param name='/patrol/imu_topic' value = '/mavros/imu/data'/>
    <param name='/patrol/odom_topic' value = 'vehicle/odom'/>
    <param name="/robot_base_frame" value ="base_link"/>

 
    <group if="$(eval arg('hardware_in_loop'))">
       <include file="$(find vehicle_hardware_bringup)/launch/vehicle_core.launch">
           <arg name="vehicle_type" value="$(arg vehicle_type)"/>
            <arg name="vcu_up" default="true"/>
            <arg name="gps_up" default="true"/>
            <arg name="zed_camera" value="false"/>
            <arg name="2d_lidar" value="false"/>
            <arg name="3d_lidar" value="true"/>
       </include>
    </group>

     <group unless="$(eval arg('hardware_in_loop'))">
       <include file="$(find vehicle_description)/launch/boson_sim.launch">
            <arg name="vehicle_type" value="$(arg vehicle_type)"/>
       </include>
    </group>


    <!-- path publisher -->
    <include file="$(find autopilot)launch/path_publisher.launch">
        <arg name="mission_file" value="$(arg mission_file)"/>
        <arg name="mission_continue" value="$(arg mission_continue)"/>
    </include>

    <!-- utils-->
    <node pkg = "autopilot" type = "odom_path_plotter.py" name = "odom_path_plotter_node">
        <param name="max_list_append" value="300" />
    </node>
    <node pkg = "autopilot" type = "markers_visualization.py" name = "visualization_marker_pure_pursuit_node" />

    <!-- obstacle stop planner -->
    <group if="$(eval arg('obs_stop_planner'))">
        <node pkg = "autopilot" type = "path_tracking_pure_pursuit_collision.py" name = "pure_pursuit_collision_node" output = 'screen' />
        <include file="$(find obstacle_stop_planner)/launch/obstacle_stop_planner.launch">
            <arg name="mission_continue" value="$(arg mission_continue)"/>
<!--            <arg name="sensor_source" value="$(arg sensor_source)"/>-->
        </include>
        <node name="rviz_obstacle_stop_planner" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol_obstacle_stop_planner.rviz" if = "$(eval arg('rviz'))"/>
    </group>

    <group unless="$(eval arg('obs_stop_planner'))">
          <node pkg = "autopilot" type = "path_tracking_pure_pursuit.py" name = "pure_pursuit_node" output = 'screen' />
          <group if="$(eval arg('rviz'))">
                <node name="rviz_patrol" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol.rviz" if = "$(eval arg('rviz'))"/>
          </group>
    </group>

    <node name="patrol_bag_record" pkg="rosbag" type="record"
        args="record -o $(env HOME)/.bags/boson -a -x /zed2i/(.*)|/carla/(.*) " if="$(eval record)"/>

    <group if="$(eval arg('failsafe_enable'))">
        <include file="$(find autopilot)/launch/failsafe_manager.launch">
            <arg name="use_zed_camera"         value="false" />
            <arg name="use_oak_camera"            value="false" />
            <arg name="vehicle_safety_diagnostics" value="true"/>
            <arg name="use_emergeny_stop" value ="true"/>
        </include>
    </group>
</launch>







