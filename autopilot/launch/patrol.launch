<launch>
    <arg name="hardware_in_loop" default="true" doc="false to software in loop"/>
    <arg name="vehicle_type" default="half_cabin" doc="It can be either half_cabin or porter"/>

    <arg name="mission_file" default="default.json"/>
    <arg name="mission_continue" default="true"/>
    <arg name="mission_trips" default="0" doc="when mission_continue is true, this many number of times a mission repeat works, 0-infinity loops "/>
    <arg name ='rviz' default = 'true'/>
    <arg name="record" default="true"/>
    <arg name="failsafe_enable" default="false"/>
    <arg name="failsafe_enable_cpp" default="true"/>
    <arg name="obs_stop_planner" default="true"/>
    <arg name="enable_zed_obs" default="true"/>
    <arg name="enable_obs_v1" default="true"/>
    <arg name="use_pcl_boxes" default="true"/>
    <!-- OBS CONFIG END -->
    <arg name="pp_with_pid" default="true"/>
    <arg name="allow_reversing" default="true"/>

    <arg name="sensor_source" default='1' doc="1: Zed camera, 1: Rslidar, 2: carla"/>
    <arg name="kp" default="0.12" doc="kp:0.03,ki:0.02 for us vehicle and kp:0.12 ,ki:0.1 for india vehicles"/>
    <arg name="ki" default="0.1" doc="Donnot give value more than 0.13 for both ki and kp"/>

    <param name="kp_pid" value="$(arg kp)"/>
    <param name="ki_pid" value="$(arg ki)"/>

    <param name="/patrol/allow_reversing" value="$(arg allow_reversing)"/>
    <param name = "/patrol/mission_file" value = "$(arg mission_file)"/>
    <param name="/patrol/mission_continue" value ="$(arg mission_continue)"/>
    <param name="/patrol/mission_trips" value ="$(arg mission_trips)"/>
    <param name="/patrol/failsafe_enable" value = "$(arg failsafe_enable)"/>
    <rosparam command="load" file="$(find autopilot)/params/patrol_params.yaml"/>
    <param name='/patrol/gps_topic' value = '/vehicle/gps'/>
    <param name='/patrol/imu_topic' value = '/mavros/imu/data'/>
    <param name='/patrol/odom_topic' value = '/vehicle/odom'/>
    <param name="/robot_base_frame" value ="base_link"/>
    <param name="/patrol/enable_obs_v1" value="$(arg enable_obs_v1)"/>
 
    <group if="$(eval arg('hardware_in_loop'))">
       <include file="$(find vehicle_hardware_bringup)/launch/vehicle_core.launch">
            <arg name="vehicle_type" value="$(arg vehicle_type)"/>
            <arg name="vcu_up" default="false"/>
            <arg name="gps_up" default="false"/>
            <arg name="zed_camera" value="$(arg enable_zed_obs)"/>
            <arg name="2d_lidar" value="false"/>
            <arg name="3d_lidar" value="$(eval arg('enable_obs_v1') or arg('use_pcl_boxes'))"/>
       </include>
    </group>

     <group unless="$(eval arg('hardware_in_loop'))">
        <param name='/patrol/gps_topic' value = '/mavros/global_position/global'/>
        <include file="$(find vehicle_description)/launch/boson_sim.launch">
            <arg name="vehicle_type" value="$(arg vehicle_type)"/>
        </include>
    </group>


    <!-- path publisher -->
    <include file="$(find autopilot)launch/path_publisher.launch">
        <arg name="mission_file" value="$(arg mission_file)"/>
        <arg name="mission_continue" value="$(arg mission_continue)"/>
    </include>

    <!-- utils-->
    <node pkg = "autopilot" type = "odom_path_plotter.py" name = "odom_path_plotter_node">
        <param name="max_list_append" value="300" />
    </node>
    <node pkg = "autopilot" type = "markers_visualization.py" name = "visualization_marker_pure_pursuit_node" />

    <!-- obstacle stop planner -->
    <group if="$(eval arg('obs_stop_planner'))">
        <node pkg = "autopilot" type = "path_tracking_pure_pursuit_collision.py" name = "pure_pursuit_collision_node" output = 'screen' />
        <include file="$(find obstacle_stop_planner)/launch/obstacle_stop_planner.launch">
            <arg name="mission_continue" value="$(arg mission_continue)"/>
            <arg name="use_pcl_boxes" value="$(arg use_pcl_boxes)"/>
            <arg name="enable_zed_obs" value="$(arg enable_zed_obs)"/>
           <arg name="sensor_source" value="$(arg sensor_source)"/>
        </include>
        <node name="rviz_obstacle_stop_planner" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol_obstacle_stop_planner.rviz" if = "$(eval arg('rviz'))"/>
    </group>

    <group unless="$(eval arg('obs_stop_planner'))">
        <!-- <group if="$(eval arg('pp_with_pid'))"> -->
          <node pkg = "autopilot" type = "path_tracking_pure_pursuit.py" name = "pure_pursuit_node" output = 'screen' />
          <group if="$(eval arg('rviz'))">
                <node name="rviz_patrol" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol.rviz" if = "$(eval arg('rviz'))"/>
          </group>
    </group>

        <!-- <group unless="$(eval arg('pp_with_pid'))">
          <node pkg = "autopilot" type = "path_tracking_pure_pursuit.py" name = "pure_pursuit_node" output = 'screen' />
          <group if="$(eval arg('rviz'))">
                <node name="rviz_patrol" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol.rviz" if = "$(eval arg('rviz'))"/>
          </group>
          </group>
    </group> -->

    <!-- Record only when HIL is True -->
    <group if="$(eval arg('hardware_in_loop'))">
        <group if="$(eval arg('pp_with_pid'))">
            <node name="patrol_bag_record" pkg="rosbag" type="record"
                args="record -o $(env HOME)/.bags/boson_pid_kp_$(arg kp)_ki_$(arg ki) -a -x /zed2i/(.*)|/carla/(.*)|/rslidar_points " if="$(eval record)"/> 
        </group>

        <group unless="$(eval arg('pp_with_pid'))">
            <node name="patrol_bag_record" pkg="rosbag" type="record"
                args="record -o $(env HOME)/.bags/boson -a -x /zed2i/(.*)|/carla/(.*)|/rslidar_points " if="$(eval record)"/>
        </group>
        <!-- <include file="$(find vehicle_common)/launch/vehicle_description.launch"> </include> -->
        <group if="$(eval arg('failsafe_enable'))">
            <include file="$(find autopilot)/launch/failsafe_manager.launch">
                <arg name="use_zed_camera"         value="false" />
                <arg name="use_oak_camera"            value="false" />
                <arg name="vehicle_safety_diagnostics" default="true"/>
                <arg name="vehicle_safety_cpp_diagnostics" default="false"/>
                <arg name="use_emergeny_stop" value ="true"/>
            </include>
        </group>
        <group if="$(eval arg('failsafe_enable_cpp'))">
            <include file="$(find autopilot)/launch/failsafe_manager.launch">
                <arg name="use_zed_camera"         value="false" />
                <arg name="use_oak_camera"            value="false" />
                <arg name="vehicle_safety_diagnostics" default="false"/>
                <arg name="vehicle_safety_cpp_diagnostics" default="true"/>
                <arg name="use_emergeny_stop" value ="true"/>
            </include>
        </group>
    </group>
</launch>
