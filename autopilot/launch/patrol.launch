<launch>
    <arg name="hardware_in_loop" default="true" doc="false to software in loop"/>
    <arg name="vehicle_type" default="half_cabin" doc="It can be either half_cabin or porter"/>
    <arg name="enable_anello_gps" default="false"/>

    <arg name="mission_file" default="default.json"/>
    <arg name="mission_continue" default="true"/>
    <arg name="mission_trips" default="0" doc="when mission_continue is true, this many number of times a mission repeat works, 0-infinity loops "/>
    <arg name ='rviz' default = 'true'/>
    <arg name="record" default="false"/>
    <arg name="record_minimal" default ="true"/>
    <arg name="failsafe_enable_cpp" default="true"/>
    <!-- DO NOT KEEP BOTH obs_stop_planner and enable_centering TO TRUE AT A TIME -->
    <arg name="obs_stop_planner" default="true"/>
    <arg name="enable_centering" default="false"/>
    <arg name="pure_pursuit_refactor" default="true"/>

    <arg name="enable_waypoint_operations" default="true"/>  <!-- Argument to allow Waypoint Actions to execute-->


    <arg name="enable_zed_obs" default="true"/>
    <arg name="enable_zed_based_v1" default="false"/> <!-- Note: Only effects if enable_zed_obs is true. Lidar Based V1 won't work if zed based v1 is True-->
    <arg name="enable_obs_v1" default="true"/>
    <arg name="use_pcl_boxes" default="true"/>

    <!-- Don't enable any two of the sensors at once for now. Enable only one at a time RSLidar/LSLidar along with Itops. -->
    <arg name="enable_rslidar" default="false"/>
    <arg name="enable_lslidar" default="true"/>

    <arg name="enable_itops_f25" default="false"/>

    <!-- OBS CONFIG END -->
    <arg name="pp_with_pid" default="false"/>
    <arg name="enable_rqt" default="false"/>
    
    <arg name="allow_reversing" default="true"/>

    <!-- Collision Monitor node -->
    <arg name="enable_collision_monitor" default="true"/>





    <arg name="sensor_source" default='1' doc="1: Zed camera, 1: Rslidar, 2: carla"/>
    <arg name="kp" default="0.12" doc="kp:0.03,ki:0.02 for us vehicle and kp:0.12 ,ki:0.1 for india vehicles"/>
    <arg name="ki" default="0.1" doc="Donnot give value more than 0.13 for both ki and kp"/>

    <param name="/pure_pursuit/kp_pid" value="$(arg kp)"/>
    <param name="/pure_pursuit/ki_pid" value="$(arg ki)"/>
    <param name="/patrol/pp_with_pid" value="$(arg pp_with_pid)"/>
    <param name="/pure_pursuit/enable_rqt" value="$(arg enable_rqt)" />

    <param name="/patrol/allow_reversing" value="$(arg allow_reversing)"/>
    <param name = "/patrol/mission_file" value = "$(arg mission_file)"/>
    <param name="/patrol/mission_continue" value ="$(arg mission_continue)"/>
    <param name="/patrol/mission_trips" value ="$(arg mission_trips)"/>
    <rosparam command="load" file="$(find autopilot)/params/patrol_params.yaml"/>
    <rosparam command="load" file="$(find boson_hmi)/params/modified_hmi_param.yaml"/>
    <param name='/patrol/gps_topic' value = '/vehicle/gps'/>
    <param name='/patrol/imu_topic' value = '/mavros/imu/data'/>
    <param name='/patrol/odom_topic' value = '/vehicle/odom'/>
    <param name="/robot_base_frame" value ="base_link"/>
    <param name="/patrol/enable_obs_v1" value="$(arg enable_obs_v1)"/>
    <param name="/patrol/enable_itops_f25" value="$(arg enable_itops_f25)"/>
 
    <group if="$(eval arg('hardware_in_loop'))">
       <include file="$(find vehicle_hardware_bringup)/launch/vehicle_core.launch">
           <arg name="vehicle_type" value="$(arg vehicle_type)"/>
            <arg name="vcu_up" default="false"/>
            <arg name="gps_up" default="false"/>
            <arg name="zed_camera" value="$(arg enable_zed_obs)"/>
            <arg name="2d_lidar" value="false"/>
            <!-- <arg name="3d_lidar" value="$(eval arg('enable_obs_v1') or arg('use_pcl_boxes'))"/> -->
            <arg name="rslidar" value="$(arg enable_rslidar)"/>
            <arg name="lslidar" value="$(arg enable_lslidar)"/>
            <arg name="itops_f25" value="$(arg enable_itops_f25)"/>
            <arg name="enable_anello_gps" value="$(arg enable_anello_gps)"/>
       </include>
    </group>

     <group unless="$(eval arg('hardware_in_loop'))">
        <param name='/patrol/gps_topic' value = '/mavros/global_position/global'/>
        <include file="$(find vehicle_description)/launch/boson_sim.launch">
            <arg name="vehicle_type" value="$(arg vehicle_type)"/>
        </include>
    </group>


    <!-- path publisher -->
    <include file="$(find autopilot)launch/path_publisher.launch">
        <arg name="mission_file" value="$(arg mission_file)"/>
        <arg name="mission_continue" value="$(arg mission_continue)"/>
    </include>

    <!-- utils-->
    <node pkg = "autopilot" type = "odom_path_plotter.py" name = "odom_path_plotter_node">
        <param name="max_list_append" value="300" />
    </node>

    <node pkg = "autopilot" type = "markers_visualization.py" name = "visualization_marker_pure_pursuit_node" />
    
    <group if="$(eval arg('enable_waypoint_operations'))">
        <param name="/waypoint_operation_threshold_distance" value="1"/>
        <node pkg="autopilot" type="waypoint_operations.py" name="route_planner_action" output='screen'/>
    </group>


    <!-- obstacle stop planner -->
    <group if="$(eval arg('obs_stop_planner'))"> 
        <!-- pure pursuit refactor enabled -->
        <group if="$(eval arg('pure_pursuit_refactor'))"> 
            <param name="/trajectory_in" value="/local_gps_trajectory"/>
            <param name="/trajectory_timeout" value="2"/>
            <node pkg = "autopilot" type = "path_tracking_pure_pursuit_refactor.py" name = "pure_pursuit_collision_node" output = 'screen' />
        </group> 
        <!-- pure pursuit refactor disabled -->
        <group unless="$(eval arg('pure_pursuit_refactor'))">  
            <node pkg = "autopilot" type = "path_tracking_pure_pursuit_collision.py" name = "pure_pursuit_collision_node" output = 'screen' />
        </group>
        <param name="/trajectory_in" value="/local_gps_trajectory"/>
        <include file="$(find obstacle_stop_planner)/launch/obstacle_stop_planner.launch">
            <arg name="mission_continue" value="$(arg mission_continue)"/>
            <arg name="use_pcl_boxes" value="$(arg use_pcl_boxes)"/>
            <arg name="enable_zed_obs" value="$(arg enable_zed_obs)"/>
             <arg name="sensor_source" value="$(arg sensor_source)"/>
            <arg name="rslidar" value="$(arg enable_rslidar)"/>
            <arg name="lslidar" value="$(arg enable_lslidar)"/>
           
            <arg name="enable_itops_f25" value="$(arg enable_itops_f25)"/>
            <arg name="enable_zed_based_v1" value="$(arg enable_zed_based_v1)"/>
        </include>
        <node name="rviz_obstacle_stop_planner" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol_obstacle_stop_planner.rviz" if = "$(eval arg('rviz'))"/>
    </group> 

    <!-- Auto nav  -->
    <arg name="cloud_in" default="/rslidar_points" if = "$(eval arg('enable_rslidar'))"/>
    <arg name="cloud_in" default="/lslidar_point_cloud" if = "$(eval arg('enable_lslidar'))"/>
    <!-- <arg name="cloud_in" default="/itops_f25/camera/points" unless="$(eval arg('enable_rslidar') or arg('enable_lslidar') and not arg('enable_itops_f25'))"/> -->

    <!-- centering-->
    <group if="$(eval arg('enable_centering'))">
        <!-- pure pursuit enabled -->
        <group if ="$(eval arg('pure_pursuit_refactor'))">
                <param name="/trajectory_in" value="/local_gps_trajectory"/>
                <param name="/trajectory_timeout" value="2"/> 
                <node pkg = "autopilot" type = "path_tracking_pure_pursuit_refactor.py" name = "pure_pursuit_collision_node" output = 'screen' />
        </group>
        <!-- pure pursuit disabled -->
        <group unless = "$(eval arg('pure_pursuit_refactor'))">
                <node pkg = "autopilot" type = "path_tracking_pure_pursuit_collision.py" name = "pure_pursuit_collision_node" output = 'screen' />
        </group>

        <param name="/patrol/allow_reversing" value="false"/>
        <param name="patrol/enable_cte_based_speed_control" value="false"/>
        <param name="/patrol/pp_with_pid" value="false"/>


        <!-- <node pkg = "autopilot" type = "path_tracking_pure_pursuit_collision.py" name = "pure_pursuit_collision_node" output = 'screen' /> -->
        <param name="/trajectory_in" value="/local_gps_trajectory"/>
        <include file="$(find auto_nav)/launch/auto_nav.launch">
            <arg name="cloud_in_for_auto_nav" value="$(arg cloud_in)"/>
            <arg name="mission_continue" value="$(arg mission_continue)"/>

        </include>
        <node name="rviz_auto_nav" pkg="rviz" type="rviz" args="-d $(find auto_nav)/rviz/lsm_on_inliers.rviz" if = "$(eval arg('rviz'))"/>
        
        <node name="auto_nav_bag_record" pkg="rosbag" type="record"
            args="record -o $(env HOME)/.bags/auto_nav -a -x /zed2i/(.*)|/carla/(.*)|/obstacle_detector/(.*)|/local_cloud_map|/global_cloud_map|/rslidar_points|/lslidar_point_cloud" if="$(eval arg('record') and arg('hardware_in_loop'))"/>
         <node name="auto_nav_bag_small_record" pkg="rosbag" type="record"
               args="record -o $(env HOME)/.bags/auto_nav_small  /global_gps_path /global_gps_trajectory /autonav_core_node/lanes /autonav_core_node/autonav_diagnostics /autonav_core_node/center_line
                /local_trajectory /mavros/gpsstatus/gps1/raw /mavros/gpsstatus/gps2/raw /pilot_status /autonav_core_node/dwa_best_traj /autonav_core_node/front_pose 
                /pure_pursuit_diagnose /target_pose /tf /tf_static /vehicle/cmd_drive_safe 
                /vehicle/foot_print /vehicle/gps /vehicle/odom /autonav_core_node/vibration_path " if="$(eval arg('record') and arg('hardware_in_loop'))"/>
    </group> 

    <!-- collision monitor -->
    <group if="$(eval arg('enable_collision_monitor'))">
        <group if="$(eval arg('enable_rslidar') or arg('enable_lslidar'))">
            <include file="$(find pointcloud_to_laserscan_launcher)/launch/pointcloud_to_laserscan.launch">
                <arg name="cloud_in" value="$(arg cloud_in)"/>
                <arg name="scan_out" value="lidar_laser_scan"/>
                <arg name="config_file" value="lidar_collision_monitor_p2c.yaml"/>
            </include>
            <include file="$(find collision_monitor)/launch/collision_monitor.launch">
            </include>
        </group>
    </group>


    
    <!--only patrol-->
    <group unless="$(eval arg('enable_centering') or arg('obs_stop_planner'))"> 
        <group if="$(eval arg('pure_pursuit_refactor'))"> <!--refactor enabled-->
          <param name="/trajectory_in" value="/global_gps_trajectory"/>
          <param name="/trajectory_timeout" value="0"/> 
          <node pkg = "autopilot" type = "path_tracking_pure_pursuit_refactor.py" name = "pure_pursuit_node" output = 'screen' />
        </group> 
        <group unless="$(eval arg('pure_pursuit_refactor'))">
            <node pkg = "autopilot" type = "path_tracking_pure_pursuit.py" name = "pure_pursuit_node" output = 'screen' />

        </group>
          <param name="/trajectory_in" value="/global_gps_trajectory"/>
        <group if="$(eval arg('rviz'))"> 
                <node name="rviz_patrol" pkg="rviz" type="rviz" args="-d $(find autopilot)/rviz/patrol.rviz" if = "$(eval arg('rviz'))"/>
        </group>
    </group> 



    <group unless="$(eval arg('enable_centering'))">
        <group if="$(eval arg('pp_with_pid'))">
            <node name="patrol_pid_bag_record" pkg="rosbag" type="record"
                args="record -o $(env HOME)/.bags/boson_pid_kp_$(arg kp)_ki_$(arg ki)_$(arg mission_file) -a -x /zed2i/(?!(.*)info)(.*)(left|right|rgb|depth|stereo|confidence|point|disparity|temperature)(.*)|/carla/(.*)|/obstacle_detector/(.*)|/rslidar_points|/lslidar_point_cloud|/itops_f25/(.*)|/cloud_concatenated" if="$(eval arg('record') and arg('hardware_in_loop'))"/>
        </group>

        <group unless="$(eval arg('pp_with_pid'))">
            <node name="patrol_bag_record" pkg="rosbag" type="record"
                args="record -o $(env HOME)/.bags/boson_$(arg mission_file) -a -x /zed2i/(?!(.*)info)(.*)(left|right|rgb|depth|stereo|confidence|point|disparity|temperature)(.*)|/carla/(.*)|/obstacle_detector/(.*)|/rslidar_points|/lslidar_point_cloud|/itops_f25/(.*)|/cloud_concatenated" if="$(eval arg('record') and arg('hardware_in_loop'))"/>
        </group>
    </group>

    <!-- if mininal bag recorder is enabled-->

    

    <group if="$(eval arg('record_minimal') and arg('hardware_in_loop'))">
        <include file="$(find autopilot)/launch/minimal_bag_recorder.launch">
            <arg name="mission_file" default="$(arg mission_file)"/>
        </include>
    </group>
    


    <!-- <include file="$(find vehicle_common)/launch/vehicle_description.launch"> </include> -->
    <group if="$(eval arg('failsafe_enable_cpp'))">
        <include file="$(find autopilot)/launch/failsafe_manager.launch">
            <arg name="use_zed_camera"         value="false" />
            <arg name="use_oak_camera"            value="false" />
            <arg name="vehicle_safety_cpp_diagnostics" default="true"/>
            <arg name="use_emergeny_stop" value ="true"/>
        </include>
    </group>
</launch>
