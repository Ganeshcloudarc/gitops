<launch>
    <arg name="mission_continue" default="false"/>
    <arg name="sensor_source" default="1" doc="0: zed_camera, 1: rslidar, 2: rplidar "/>
    <arg name="use_pcl_boxes" default="true"/>
    
    <!-- SENSORS -->
    <arg name="enable_zed_obs" default="true"/>
    <arg name="enable_zed_based_v1" default="false"/>
    <arg name="rslidar" default="true"/>
    <arg name="lslidar" default="false"/>
    <arg name="enable_itops_f25" default="true"/>

    <arg name="cloud_in" default="/rslidar_points"/>
    <!-- 
            /obstacle_detector/cloud_clusters : It is subjected to get effected by the changes from RQT in live.
            If you don't want that use the below line.
            <arg name="cloud_in" value="/obstacle_detector/object_cloud"/> -->
    <!-- <arg name="pointcloud_to_laserscan_cloud_in" default="/obstacle_detector/cloud_clusters"/> -->
    <arg name="pointcloud_to_laserscan_cloud_in" default="/obstacle_detector/object_cloud"/>
    <arg name="cloud_to_scan_config" default="cloud_to_laser_180_params.yaml"/>
    <arg name="cloud_to_scan_config_360" default="cloud_to_laser_360_params.yaml"/>
    <arg name="lidar_obstacle_detector_config" default="rs_lidar_config.yaml"/>
    <param name = "/obstacle_stop_planner/mission_continue" value = "$(arg mission_continue)"/>
    <param name="use_pcl_boxes" value="$(arg use_pcl_boxes)"/>
    <param name="/pcl_bbox_topic" value="/filtered_detector/jsk_bboxes"/>
    <param name="enable_zed_obs" value="$(arg enable_zed_obs)"/>

    <group if="$(eval arg('enable_itops_f25'))">
        <include file="$(find obstacle_stop_planner)/launch/pointcloud_to_laserscan.launch">
            <arg name="cloud_in" value="/itops_f25/camera/points"/>
            <arg name="node_name" value="itops_f25_pointcloud_to_laserscan_node"/>
            <arg name="config_file" value="itops_cloud_to_laser_360_params.yaml"/>
            <arg name="scan_out" value="/itops_laser_scan"/>
            <!-- <arg name="target_frame" value="base_link"/> -->
        </include>
    </group>

    <group if="$(eval arg('rslidar'))">
        <include file="$(find lidar_obstacle_detector)/launch/obstacle_detect.launch">
            <arg name="rviz" value="false"/>
        </include>
        <include file="$(find obstacle_stop_planner)/launch/pointcloud_to_laserscan.launch">
            <arg name="cloud_in" value="$(arg pointcloud_to_laserscan_cloud_in)"/>
            <arg name="config_file" value="$(arg cloud_to_scan_config)"/>
        </include>
    </group>
    
    <group if="$(eval arg('lslidar'))">
        <include file="$(find lidar_obstacle_detector)/launch/obstacle_detect.launch">
            <arg name="rviz" value="false"/>
            <arg name="points_in" value="lslidar_point_cloud"/>
            <arg name="bbox_target_frame" value="map"/>
        </include>
        <include file="$(find obstacle_stop_planner)/launch/pointcloud_to_laserscan.launch">
            <arg name="cloud_in" value="$(arg pointcloud_to_laserscan_cloud_in)"/>
            <arg name="config_file" value="$(arg cloud_to_scan_config)"/>
            <arg name="node_name" value="lslidar_pointcloud_to_laserscan_node"/>
        </include>
    </group>

   

    <!-- <include file="$(find obstacle_stop_planner)/launch/pointcloud_to_laserscan.launch">
        <arg name="cloud_in" value="$(arg pointcloud_to_laserscan_cloud_in)"/>
        <arg name="config_file" value="$(arg cloud_to_scan_config)"/>
        
    </include> -->

    <rosparam command="load" file="$(find obstacle_stop_planner)/params/obstacle_stop_planner.yaml"/>
    
    <!-- "$(eval arg('record') and arg('hardware_in_loop'))" -->
    <group if="$(eval arg('enable_zed_obs') and arg('enable_zed_based_v1'))">
        <param name="obstacle_stop_planner/scan_in" value="/zed2i/zed_node/zed_laser_scan"/>
    </group>

    <group unless="$(eval arg('enable_zed_obs') and arg('enable_zed_based_v1'))">
        <group if="$(eval arg('enable_itops_f25'))">
            <group if="$(eval arg('lslidar') or arg('rslidar'))">

                <!-- Merge Laser scan -->
                <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen">
                    <param name="destination_frame" value="base_link"/>
                    <param name="cloud_destination_topic" value="/merged_cloud"/>
                    <param name="scan_destination_topic" value="/scan_multi"/>
                    <param name="laserscan_topics" value ="/itops_laser_scan /laser_scan" /> <!-- LIST OF THE LASER SCAN TOPICS TO SUBSCRIBE -->
                    <param name="angle_min" value="-3.1415926536"/>
                    <param name="angle_max" value="3.1415926536"/>
                    <param name="angle_increment" value="0.0058"/>
                    <param name="scan_time" value="0.0333333"/>
                    <param name="range_min" value="0.30"/>
                    <param name="range_max" value="50.0"/>
                </node>
                <param name="obstacle_stop_planner/scan_in" value="/scan_multi"/>
            </group>

            <group unless="$(eval arg('lslidar') or arg('rslidar'))">
                <param name="obstacle_stop_planner/scan_in" value="/itops_laser_scan"/>
            </group>
        </group>
        <group unless="$(eval arg('enable_itops_f25'))">
            <param name="obstacle_stop_planner/scan_in" value="laser_scan"/>
        </group>
    </group>
    
    <param name="/obstacle_stop_planner/use_zed_object_detection" value="$(arg enable_zed_obs)"/>


    <node pkg="obstacle_stop_planner" type="obstacle_stop_planner.py" name="obstacle_stop_planner_node" output="screen" />


</launch>

<!-- if="$(eval arg('arg_name') == 'desired_value')"/> -->