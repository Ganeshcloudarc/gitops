<launch>
    <arg name="vehicle_type" default="half_cabin"/>
    <arg name="footprint_pub" default="true"/>
    <arg name="odom_pub" default="true"/>
    <arg name="gps_pub" default="true"/>
    <arg name="anello_gps" default="false"/>
    <arg name="polynav_gps" default="false"/>
    <arg name="enable_standalone_gps" default="false"/>
    <arg name="enable_vision_rtk" default="false"/>
    
    <arg name="enable_2d_mode" default="true"/>

    <param name ="/base_frame" value ="base_link"/>
    <param name ='/odometry_in' value ="/mavros/global_position/local" />
    <param name="/gps_in" value ="/mavros/global_position/global"/>
    <param name="/send_odom" value="$(arg odom_pub)" />
    <param name="/send_gps" value="$(arg gps_pub)" />
    <param name="/send_footprint" value="$(arg footprint_pub)" />
    <param name="/odometry_out" value="/vehicle/odom" />
    <param name="/gps_out" value="/vehicle/gps"/>
    <param name="/footprint_out" value="/vehicle/foot_print" />
    <param name="vehicle_type" value="$(arg vehicle_type)"/>
    <param name="/gps_system" value="ardusimple_pixhawk"/>
    <param name="standalone_gps" value="$(arg enable_standalone_gps)"/> 



    <group if="$(eval anello_gps)">
      <param name="/gps_system" value="anello"/>

      <node pkg = "vehicle_common" type = "anello_gps_transform_node.py" name="anello_gps_transform_node" />
      <param name ='/odometry_in' value ="/anello_ins/global_position/local" />
      <param name="/gps_in" value ="/anello_ins/global_position/global"/>
    </group>

    <group if="$(eval polynav_gps)">

      <param name="/gps_system" value="polynav"/>

      <include file="$(find polyx_nodea)/launch/launch_polynav.launch"> </include>

      <node pkg = "vehicle_common" type = "polynav_gps_transform_node.py" name="polynav_gps_transform_node" />
      <param name ='/odometry_in' value ="/polynav/global_position/local" />
      <param name="/gps_in" value ="/polynav/global_position/global"/>
      <remap from="/polynav/gpsstatus/gps1/raw" to="/mavros/gpsstatus/gps1/raw"/> <!-- For the sake of Vehicle safety -->
      <remap from="/polynav/gpsstatus/gps2/raw" to="/mavros/gpsstatus/gps2/raw"/>

    </group>
      <group if="$(eval enable_vision_rtk)">
      <arg name = "fixposition_enu_mode" default = "false"/>
      <param name="/gps_system" value="vision_rtk"/>
      <include file="$(find fixposition_driver_ros1)/launch/tcp.launch"> </include>

      <node pkg = "vehicle_common" type = "fixposition.py" name="fixposition_transform_node">
      <remap from="fixposition/gpsstatus/gps1/raw" to="/mavros/gpsstatus/gps1/raw"/>
      <remap from="fixposition/gpsstatus/gps2/raw" to="/mavros/gpsstatus/gps2/raw"/>
      <remap from="/fixposition/global_position/compass_hdg" to="/mavros/global_position/compass_hdg"/>
      </node>
      <param name="odometry_in" value="/fixposition/odometry"/>
      <param name="gps_in" value="/fixposition/global_position/global"/>
      <param name="vision-rtk" value="true"/>
      <param name="fixposition_enu_mode" value="$(arg fixposition_enu_mode)"/>
      
    </group>
 
    <group if="$(eval enable_standalone_gps)">

      <param name="/gps_system" value="um982"/>

      <!-- Launch UM982 Driver -->

      <include file="$(find gps_driver_um982)/launch/launch_um982.launch"> </include>

      <!-- GPS Transform Node -->
      <node pkg = "vehicle_common" type = "standalone_gps_transform_node.py" name="standalone_gps_transform_node"  output="screen" />
      <param name ='/odometry_in' value ="/gps/global_position/local" />
      <param name="/gps_in" value ="/gps/global_position/global_center"/>
      <param name="standalone_gps" value="true"/> 
    </group>
    

    <param name="enable_2d_mode" value="$(arg enable_2d_mode)"/>

    <group if="$(eval vehicle_type == 'half_cabin')">
        <arg name="config_param_file" default="$(find vehicle_common)/params/half_cabin_config.yaml"/>
        <rosparam command="load" file="$(arg config_param_file)" ns="vehicle" />
        <param name="robot_description" command="$(find xacro)/xacro '$(find vehicle_common)/urdf/vehicle_description.xacro'  config_file:=$(arg config_param_file)"/>
    </group>

    <group if="$(eval vehicle_type == 'porter')">
       <arg name="config_param_file" default="$(find vehicle_common)/params/porter_config.yaml"/>
        <rosparam command="load" file="$(arg config_param_file)" ns="vehicle" />
        <param name="robot_description" command="$(find xacro)/xacro  '$(find vehicle_common)/urdf/vehicle_description.xacro' config_file:=$(arg config_param_file)"/>
    
    </group>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
  	<param name="publish_frequency" value="50"/>
  </node>
  
  <node pkg = "vehicle_common" type = "mavros_map_to_base.py" name = "tf_converter" />
  <node pkg = "tf" type = "static_transform_publisher" name = "odom_to_base_tf_node" args= " 0 0 0 0 0 0 1  /map /odom 20" />
</launch>
